#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('impress:server');
const http = require('http');
const fs = require('fs');
const schedule = require('node-schedule');
const chinaz = require('../modules/chinaz.js');
const cz = Object.create(chinaz);
const portals = JSON.parse(fs.readFileSync('public/data/portals.json'));


// 创建服务器并挂载到 3005 端口
const port = normalizePort(process.env.PORT || '3005');
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// 设置定时任务
const scheduleTime = '* */1 * * *';
schedule.scheduleJob(scheduleTime, function () {
  let i = 0;
  updateRecords();

  function updateRecords () {
    const portal = portals[i];
    cz.getRecord(portal.site, function (reply) {
      
      if (reply.status == 1) {
        portal.records.push(reply.record);
  
        if (portal.records.length > 30) {
          portal.records = portal.records.sort((a, b) => a < b);
          portal.records = portal.records.slice(portal.records.length - 30);
        }
  
      } else {
      }
      
      i += 1;
      if (i == 4) {
        fs.writeFileSync('public/data/portals.json', JSON.stringify(portals));
      } else {
        setTimeout(updateRecords, 10000);
      }
    })
  }
});


function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      process.exit(1);
      break;
    case 'EADDRINUSE':
      process.exit(1);
      break;
    default:
      throw error;
  }
}


function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
